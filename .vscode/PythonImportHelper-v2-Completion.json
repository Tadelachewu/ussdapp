[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "handle_ussd",
        "importPath": "services.menu_service",
        "description": "services.menu_service",
        "isExtraImport": true,
        "detail": "services.menu_service",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Loan",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ai_score_loan",
        "importPath": "ml.scoring",
        "description": "ml.scoring",
        "isExtraImport": true,
        "detail": "ml.scoring",
        "documentation": {}
    },
    {
        "label": "handle_loan_application",
        "importPath": "services.loan_service",
        "description": "services.loan_service",
        "isExtraImport": true,
        "detail": "services.loan_service",
        "documentation": {}
    },
    {
        "label": "ussd_blueprint",
        "importPath": "routes.ussd",
        "description": "routes.ussd",
        "isExtraImport": true,
        "detail": "routes.ussd",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ai_score_loan",
        "kind": 2,
        "importPath": "ml.scoring",
        "description": "ml.scoring",
        "peekOfCode": "def ai_score_loan(phone_number, amount):\n    # Simulated scoring: smaller amounts = higher chance\n    score = 100 - (amount / 100)  # e.g. 500 ETB = score 95\n    score = max(30, min(score, 95))  # Clamp score\n    return score",
        "detail": "ml.scoring",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": "routes.ussd",
        "description": "routes.ussd",
        "peekOfCode": "def ussd():\n    text = request.form.get(\"text\", \"\")\n    phone = request.form.get(\"phoneNumber\")\n    response = handle_ussd(text, phone)\n    res = make_response(response, 200)\n    res.headers['Content-Type'] = 'text/plain'\n    return res",
        "detail": "routes.ussd",
        "documentation": {}
    },
    {
        "label": "ussd_blueprint",
        "kind": 5,
        "importPath": "routes.ussd",
        "description": "routes.ussd",
        "peekOfCode": "ussd_blueprint = Blueprint('ussd', __name__)\n@ussd_blueprint.route(\"/ussd\", methods=[\"POST\"])\ndef ussd():\n    text = request.form.get(\"text\", \"\")\n    phone = request.form.get(\"phoneNumber\")\n    response = handle_ussd(text, phone)\n    res = make_response(response, 200)\n    res.headers['Content-Type'] = 'text/plain'\n    return res",
        "detail": "routes.ussd",
        "documentation": {}
    },
    {
        "label": "handle_loan_application",
        "kind": 2,
        "importPath": "services.loan_service",
        "description": "services.loan_service",
        "peekOfCode": "def handle_loan_application(phone_number, amount_input):\n    db = SessionLocal()\n    try:\n        if not amount_input.isdigit():\n            return \"END Invalid amount entered.\"\n        amount = int(amount_input)\n        if amount <= 0 or amount > 10000:\n            return \"END Amount must be between 1 and 10,000 ETB.\"\n        user = db.query(User).filter_by(phone_number=phone_number).first()\n        if not user:",
        "detail": "services.loan_service",
        "documentation": {}
    },
    {
        "label": "handle_ussd",
        "kind": 2,
        "importPath": "services.menu_service",
        "description": "services.menu_service",
        "peekOfCode": "def handle_ussd(text, phone_number):\n    user_input = text.split(\"*\")\n    if text == \"\":\n        return \"CON Welcome to AI Loan Service\\n1. Apply for Loan\\n2. Exit\"\n    if user_input[0] == \"1\":\n        if len(user_input) == 1:\n            return \"CON Enter loan amount:\"\n        elif len(user_input) == 2:\n            return handle_loan_application(phone_number, user_input[1])\n    elif user_input[0] == \"2\":",
        "detail": "services.menu_service",
        "documentation": {}
    },
    {
        "label": "is_valid_amount",
        "kind": 2,
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "peekOfCode": "def is_valid_amount(amount_str):\n    return amount_str.isdigit() and 0 < int(amount_str) <= 10000",
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.register_blueprint(ussd_blueprint)\n# Initialize DB tables\nBase.metadata.create_all(bind=engine)\nif __name__ == \"__main__\":\n    app.run(port=3000)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": "loan",
        "description": "loan",
        "peekOfCode": "def ussd():\n    session_id = request.form.get(\"sessionId\")\n    phone_number = request.form.get(\"phoneNumber\")\n    text = request.form.get(\"text\", \"\")\n    print(f\"Session ID: {session_id}, Phone Number: {phone_number}, Text: {text}\")\n    # Split the text by '*' to track user inputs through steps\n    user_response = text.split('*')\n    if text == \"\":\n        # First interaction - show main menu\n        response = \"CON Welcome to XBank Lending\\n\"",
        "detail": "loan",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "loan",
        "description": "loan",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods=[\"POST\"])\ndef ussd():\n    session_id = request.form.get(\"sessionId\")\n    phone_number = request.form.get(\"phoneNumber\")\n    text = request.form.get(\"text\", \"\")\n    print(f\"Session ID: {session_id}, Phone Number: {phone_number}, Text: {text}\")\n    # Split the text by '*' to track user inputs through steps\n    user_response = text.split('*')\n    if text == \"\":",
        "detail": "loan",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, unique=True, nullable=False)\nclass Loan(Base):\n    __tablename__ = 'loans'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, nullable=False)\n    amount = Column(Integer)\n    status = Column(String)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Loan",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Loan(Base):\n    __tablename__ = 'loans'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, nullable=False)\n    amount = Column(Integer)\n    status = Column(String)\n    score = Column(Float)\n    created_at = Column(TIMESTAMP, server_default=func.now())",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(bind=engine)\nBase = declarative_base()\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, unique=True, nullable=False)\nclass Loan(Base):\n    __tablename__ = 'loans'",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(bind=engine)\nBase = declarative_base()\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, unique=True, nullable=False)\nclass Loan(Base):\n    __tablename__ = 'loans'\n    id = Column(Integer, primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine)\nBase = declarative_base()\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, unique=True, nullable=False)\nclass Loan(Base):\n    __tablename__ = 'loans'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, nullable=False)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "Base = declarative_base()\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, unique=True, nullable=False)\nclass Loan(Base):\n    __tablename__ = 'loans'\n    id = Column(Integer, primary_key=True)\n    phone_number = Column(String, nullable=False)\n    amount = Column(Integer)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": "ussdbank",
        "description": "ussdbank",
        "peekOfCode": "def ussd():\n    session_id = request.form.get(\"sessionId\")\n    phone_number = request.form.get(\"phoneNumber\")\n    text = request.form.get(\"text\", \"\")\n    if text == \"\":\n        response = \"CON Welcome to XBank\\n1. Check Balance\\n2. Exit\"\n    elif text == \"1\":\n        response = \"END Your balance is 500 ETB\"\n    elif text == \"2\":\n        response = \"END Thank you for using XBank!\"",
        "detail": "ussdbank",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "ussdbank",
        "description": "ussdbank",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods=[\"POST\"])\ndef ussd():\n    session_id = request.form.get(\"sessionId\")\n    phone_number = request.form.get(\"phoneNumber\")\n    text = request.form.get(\"text\", \"\")\n    if text == \"\":\n        response = \"CON Welcome to XBank\\n1. Check Balance\\n2. Exit\"\n    elif text == \"1\":\n        response = \"END Your balance is 500 ETB\"",
        "detail": "ussdbank",
        "documentation": {}
    }
]